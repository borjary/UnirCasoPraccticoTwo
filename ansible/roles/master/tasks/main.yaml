---

- name: Enable ports used by Kubernets Master 6443
  firewalld:
    port: 6443/tcp
    permanent: true
    state: enabled
  become: yes

- name: Enable ports used by Kubernets Master 2379-2380 tcp
  firewalld:
    port: 2379-2380/tcp
    permanent: true
    state: enabled
  become: yes

- name: Enable ports used by Kubernets Master 10250-10252 tcp
  firewalld:
    port: 10250-10252/tcp
    permanent: true
    state: enabled
  become: yes

- name: Enable ports used by Kubernets Master 10255 tcp
  firewalld:
    port: 10255/tcp
    permanent: true
    state: enabled
  become: yes
  
- name: Adding rules to allow acces from master to workers
  firewalld:
    rich_rule: "rule family=ipv4 source address={{ hostvars[item].ansible_host }}/32 accept"
    permanent: true
    state: enabled
  when: hostvars[item].ansible_host is defined
  with_items: "{{ groups.workers }}"
  become: yes

- name: Get infos on container
  docker_container_info:
    name:{{ container_name }}
  register: result

- name: Does container exist?
  debug:
    msg: "The container {{ 'exists' if result.exists else 'does not exist' }}"

- name: Print information about container
  debug:
    var: result.container.NetworkSettings.IPAddress
  when: result.exists

- debug:
    msg: "Red Docker detectada: {{ docker_network }}"
- name: Adding rules to allow acces from containers to master
  firewalld:
    rich_rule: "rule family=ipv4 source address={{ docker_network }} accept"
    permanent: true
    zone: public
    state: enabled
  become: yes

- name: Restart Firewalld service 
  systemd:
    name: firewalld
    state: restarted
  become: yes

- name: Donwloading images required by Kubernetes
  shell: kubeadm config images pull
  become: yes
  
- debug:
    msg: "Will be execute: kubeadm init --apiserver-advertise-address {{ ansible_host }} --pod-network-cidr {{ pod_network }}"
    
- name: Install CNI plugin of Kubernetes and define PODs network
  shell: "kubeadm init --apiserver-advertise-address {{ ansible_host }} --pod-network-cidr {{ pod_network }}"
  register: kubeadd_cmd
  become: yes

- name: Showing output of kubeadm init
  debug:
    msg: "{{ kubeadd_cmd.stdout_lines }}"
  
- name: Extracting the CRT CA hash from the Master
  shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | sha256sum
  register: cert_out
  become: yes
  
- name: Clearing the CRT Hash
  set_fact: 
    cert_hash: "{{ cert_out.stdout | regex_search('^[a-f0-9]{64}') }}"
  
- name: Extracting the token from the Master in JSON format
  shell: kubeadm token list -o json
  register: token_out
  become: yes
  
- name: Cleaning token
  set_fact: 
    token_hash: "{{ token_out.stdout | from_json | json_query('token') }}"
  
- name: Create the folder .kube
  file:
    path: /root/.kube
    state: directory
  become: yes

- name: Authorizing the root user to access the Kubernetes cluster
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
    owner: root
    group: root
  become: yes

- name: Install the SDN Flannel for Azure
  shell: kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml
  register: kubectl_sdn
  become: yes
  when: sdn == 'flannel'

- name: Install the Tigera operator
  shell: kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
  register: kubectl_operator
  become: yes
  when: sdn == 'calico'

- name: Copying Calico's custom resources
  copy:
    src: custom-resources.yaml
    dest: /root/custom-resources.yaml
    mode: '0644'
  become: yes
  when: sdn == 'calico'
  
- name: Install the SDN Calico
  shell: kubectl apply -f /root/custom-resources.yaml
  register: kubectl_sdn
  become: yes
  when: sdn == 'calico'

- name: Deploying the Nginx Ingress Controller
  shell: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.4/deploy/static/provider/baremetal/deploy.yaml
  register: kubectl_nginxic
  become: yes
  
- name: Show the result of the installation of the Nginx Ingress Controller
  debug:
    msg: "{{ kubectl_nginxic.stdout_lines }}"
  
- name: Creating the user kubeadmin
  user:
    name: kubeadmin
    password: '$6$s3cr3t.s4lt$j3SHtpVd9BgXbQQKpIGiD0nxZdswKkT/mmxmoeTl1I2XQp6Pq.kwfPBErvgOxpOswooWwi6SqmHEmS1T6FxcZ.'
    comment: admin user of kubernetes
    create_home: yes
    home: /home/kubeadmin
  become: yes

- name: Create the .kube directory for the kubeadmin user
  file:
    path: /home/kubeadmin/.kube
    state: directory
  become: yes

- name: Authorizing the kubeadmin user to access the Kubernetes cluster
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/kubeadmin/.kube/config
    remote_src: yes
    owner: kubeadmin
    group: kubeadmin
  become: yes

- name: Giving the kubeadmin user sudo permissions
  lineinfile:
    dest: /etc/sudoers.d/kubeadmin
    state: present
    create: yes
    line: 'ALL   ALL = (ALL) NOPASSWD: ALL'
  become: yes
